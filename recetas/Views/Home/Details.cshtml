@model recetas.Models.Receta

@{
    ViewData["Title"] = Model.Name;
}

<div class="max-w-4xl mx-auto">
    <div class="bg-white rounded-xl shadow-lg overflow-hidden">
        <!-- Header con imagen -->
        <div class="relative h-64 md:h-80">
            @if (!string.IsNullOrEmpty(Model.ImageUrl))
            {
                <img src="@Model.ImageUrl" alt="@Model.Name" class="w-full h-full object-cover">
            }
            else
            {
                <div class="w-full h-full bg-gradient-to-br from-primary to-secondary flex items-center justify-center">
                    <i class="fas fa-utensils text-white text-6xl"></i>
                </div>
            }
            <div class="absolute inset-0 bg-black bg-opacity-40 flex items-end">
                <div class="p-8 text-white">
                    <h1 class="text-4xl font-bold mb-2">@Model.Name</h1>
                    <p class="text-xl opacity-90">@Model.Description</p>
                </div>
            </div>
        </div>

        <div class="p-8">
            <!-- Información rápida -->
            <div class="grid grid-cols-2 md:grid-cols-4 gap-6 mb-8">
                <div class="text-center p-4 bg-gray-50 rounded-lg">
                    <i class="fas fa-clock text-primary text-2xl mb-2"></i>
                    <div class="font-semibold text-gray-800">@Model.PreparationTime min</div>
                    <div class="text-sm text-gray-600">Preparación</div>
                </div>
                <div class="text-center p-4 bg-gray-50 rounded-lg">
                    <i class="fas fa-users text-primary text-2xl mb-2"></i>
                    <div class="font-semibold text-gray-800">@Model.Servings</div>
                    <div class="text-sm text-gray-600">Porciones</div>
                </div>
                <div class="text-center p-4 bg-gray-50 rounded-lg">
                    <i class="fas fa-signal text-primary text-2xl mb-2"></i>
                    <div class="font-semibold text-gray-800">@Model.Difficulty</div>
                    <div class="text-sm text-gray-600">Dificultad</div>
                </div>
                <div class="text-center p-4 bg-gray-50 rounded-lg">
                    <i class="fas fa-star text-yellow-400 text-2xl mb-2"></i>
                    <div class="font-semibold text-gray-800">@Model.Rating/5</div>
                    <div class="text-sm text-gray-600">Calificación</div>
                </div>
            </div>

            <!-- Categorías y favorito -->
            <div class="flex justify-between items-center mb-8">
                <div class="flex gap-3">
                    <span class="px-4 py-2 bg-primary bg-opacity-10 text-primary font-medium rounded-full">
                        @Model.Category
                    </span>
                    <span class="px-4 py-2 bg-blue-100 text-blue-800 font-medium rounded-full">
                        @Model.Difficulty
                    </span>
                </div>
                <button onclick="toggleFavorite(@Model.Id)" 
                        class="flex items-center gap-2 px-4 py-2 rounded-lg border-2 transition-colors @(Model.IsFavorite ? "border-red-500 text-red-500 bg-red-50" : "border-gray-300 text-gray-600 hover:border-red-500 hover:text-red-500")">
                    <i class="fas fa-heart" id="heart-@Model.Id"></i>
                    <span id="favorite-text-@Model.Id">@(Model.IsFavorite ? "Quitar de favoritos" : "Agregar a favoritos")</span>
                </button>
            </div>

            <div class="grid md:grid-cols-2 gap-8">
                <!-- Ingredientes -->
                <div>
                    <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
                        <i class="fas fa-list-ul text-primary mr-3"></i>
                        Ingredientes
                    </h2>
                    <div class="bg-gray-50 rounded-lg p-6">
                        @foreach (var ingredient in Model.Ingredients.Split(','))
                        {
                            <div class="flex items-center mb-3 last:mb-0">
                                <i class="fas fa-check text-green-500 mr-3"></i>
                                <span class="text-gray-700">@ingredient.Trim()</span>
                            </div>
                        }
                    </div>
                </div>

                <!-- Instrucciones -->
                <div>
                    <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
                        <i class="fas fa-clipboard-list text-primary mr-3"></i>
                        Instrucciones
                    </h2>
                    <div class="bg-gray-50 rounded-lg p-6">
                        @{
                            var instructions = Model.Instructions.Split('\n');
                            int stepNumber = 1;
                        }
                        @foreach (var instruction in instructions)
                        {
                            if (!string.IsNullOrWhiteSpace(instruction))
                            {
                                <div class="flex mb-4 last:mb-0">
                                    <div class="flex-shrink-0 w-8 h-8 bg-primary text-white rounded-full flex items-center justify-center text-sm font-bold mr-4">
                                        @stepNumber
                                    </div>
                                    <p class="text-gray-700 pt-1">@instruction.Trim()</p>
                                </div>
                                stepNumber++;
                            }
                        }
                    </div>
                </div>
            </div>

            <!-- Acciones -->
            <div class="flex gap-4 mt-8 pt-8 border-t border-gray-200">
                <a asp-action="Index" class="bg-gray-100 hover:bg-gray-200 text-gray-700 px-6 py-3 rounded-lg font-medium transition-colors">
                    <i class="fas fa-arrow-left mr-2"></i>Volver a la lista
                </a>
                <a asp-action="Edit" asp-route-id="@Model.Id" class="bg-primary hover:bg-orange-600 text-white px-6 py-3 rounded-lg font-medium transition-colors">
                    <i class="fas fa-edit mr-2"></i>Editar Receta
                </a>
                <a asp-action="Delete" asp-route-id="@Model.Id" class="bg-red-500 hover:bg-red-600 text-white px-6 py-3 rounded-lg font-medium transition-colors">
                    <i class="fas fa-trash mr-2"></i>Eliminar
                </a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        async function toggleFavorite(recipeId) {
            try {
                const response = await fetch(`/Recipe/ToggleFavorite/${recipeId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    }
                });
                
                const result = await response.json();
                if (result.success) {
                    const button = document.querySelector(`button[onclick="toggleFavorite(${recipeId})"]`);
                    const heartIcon = document.getElementById(`heart-${recipeId}`);
                    const favoriteText = document.getElementById(`favorite-text-${recipeId}`);
                    
                    if (result.isFavorite) {
                        button.className = button.className.replace('border-gray-300 text-gray-600 hover:border-red-500 hover:text-red-500', 'border-red-500 text-red-500 bg-red-50');
                        favoriteText.textContent = 'Quitar de favoritos';
                    } else {
                        button.className = button.className.replace('border-red-500 text-red-500 bg-red-50', 'border-gray-300 text-gray-600 hover:border-red-500 hover:text-red-500');
                        favoriteText.textContent = 'Agregar a favoritos';
                    }
                }
            } catch (error) {
                console.error('Error toggling favorite:', error);
            }
        }
    </script>
}
