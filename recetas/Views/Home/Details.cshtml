@model recetas.Models.Receta

@{
    ViewData["Title"] = Model.Name;
}

<div class="container my-5">
    <div class="card shadow-lg border-0">
        <!-- Imagen de encabezado -->
        @if (!string.IsNullOrEmpty(Model.ImageUrl))
        {
            <img src="@Model.ImageUrl" class="card-img-top" alt="@Model.Name" style="max-height: 400px; object-fit: cover;">
        }
        else
        {
            <div class="bg-secondary text-white d-flex justify-content-center align-items-center" style="height: 300px;">
                <i class="fas fa-utensils fa-5x"></i>
            </div>
        }

        <div class="card-body">
            <!-- Título y descripción -->
            <div class="mb-4">
                <h1 class="card-title h2">@Model.Name</h1>
                <p class="card-text text-muted">@Model.Description</p>
            </div>

            <!-- Información rápida -->
            <div class="row text-center mb-4">
                <div class="col-md-3 mb-3">
                    <div class="border rounded p-3">
                        <i class="fas fa-clock text-primary mb-2"></i>
                        <div><strong>@Model.PreparationTime</strong> min</div>
                        <small class="text-muted">Preparación</small>
                    </div>
                </div>
                <div class="col-md-3 mb-3">
                    <div class="border rounded p-3">
                        <i class="fas fa-users text-primary mb-2"></i>
                        <div><strong>@Model.Servings</strong></div>
                        <small class="text-muted">Porciones</small>
                    </div>
                </div>
                <div class="col-md-3 mb-3">
                    <div class="border rounded p-3">
                        <i class="fas fa-signal text-primary mb-2"></i>
                        <div><strong>@Model.Difficulty</strong></div>
                        <small class="text-muted">Dificultad</small>
                    </div>
                </div>
                <div class="col-md-3 mb-3">
                    <div class="border rounded p-3">
                        <i class="fas fa-star text-warning mb-2"></i>
                        <div><strong>@Model.Rating</strong> / 5</div>
                        <small class="text-muted">Calificación</small>
                    </div>
                </div>
            </div>

            <!-- Categoría y botón favorito -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <span class="badge bg-primary me-2">@Model.Category</span>
                    <span class="badge bg-info text-dark">@Model.Difficulty</span>
                </div>
                <button onclick="toggleFavorite(@Model.Id)" class="btn @(Model.IsFavorite ? "btn-danger" : "btn-outline-secondary")">
                    <i class="fas fa-heart me-1" id="heart-@Model.Id"></i>
                    <span id="favorite-text-@Model.Id">
                        @(Model.IsFavorite ? "Quitar de favoritos" : "Agregar a favoritos")
                    </span>
                </button>
            </div>

            <div class="row mb-4">
                <!-- Ingredientes -->
                <div class="col-md-6">
                    <h4><i class="fas fa-list-ul me-2 text-primary"></i>Ingredientes</h4>
                    <ul class="list-group">
                        @foreach (var ingredient in Model.Ingredients.Split(','))
                        {
                            <li class="list-group-item">
                                <i class="fas fa-check-circle text-success me-2"></i> @ingredient.Trim()
                            </li>
                        }
                    </ul>
                </div>

                <!-- Instrucciones -->
                <div class="col-md-6">
                    <h4><i class="fas fa-clipboard-list me-2 text-primary"></i>Instrucciones</h4>
                    @{
                        var instructions = Model.Instructions.Split('\n');
                        int step = 1;
                    }
                    <ol class="list-group list-group-numbered">
                        @foreach (var instruction in instructions)
                        {
                            if (!string.IsNullOrWhiteSpace(instruction))
                            {
                                <li class="list-group-item">@instruction.Trim()</li>
                            }
                        }
                    </ol>
                </div>
            </div>

            <!-- Botones de acción -->
            <div class="d-flex gap-3 pt-3 border-top mt-4">
                <a asp-action="Index" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left me-2"></i>Volver a la lista
                </a>
                <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning text-white">
                    <i class="fas fa-edit me-2"></i>Editar
                </a>
                <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-danger">
                    <i class="fas fa-trash me-2"></i>Eliminar
                </a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        async function toggleFavorite(recipeId) {
            try {
                const response = await fetch(`/Recipe/ToggleFavorite/${recipeId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    }
                });

                const result = await response.json();
                if (result.success) {
                    const heartIcon = document.getElementById(`heart-${recipeId}`);
                    const text = document.getElementById(`favorite-text-${recipeId}`);
                    const button = heartIcon.closest('button');

                    if (result.isFavorite) {
                        button.classList.remove('btn-outline-secondary');
                        button.classList.add('btn-danger');
                        text.textContent = 'Quitar de favoritos';
                    } else {
                        button.classList.remove('btn-danger');
                        button.classList.add('btn-outline-secondary');
                        text.textContent = 'Agregar a favoritos';
                    }
                }
            } catch (error) {
                console.error('Error toggling favorite:', error);
            }
        }
    </script>
}
